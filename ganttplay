#!/usr/bin/env python3

"""
Simple gantt tool

SPDX-License-Identifier: GPL-2.0-only

Copyright (C) Johan Malm 2023-2024
"""

import argparse
import tomllib
from tokenize import tokenize, NUMBER, NAME, OP
from io import BytesIO
import sys
import datetime as dt
import pandas as pd
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
from dataclasses import dataclass
from enum import Enum
from typing import Any

def map_field(char):
    """ map the letter in a cell-name to its corresponding field name """
    if char == "D":
        return 'dur'
    if char == "S":
        return 'start'
    if char == "F":
        return 'finish'
    raise RuntimeError("incorrect column reference")

class Schedule():
    def __init__(self, filename, start, finish):
        self.df = pd.read_csv(filename, skip_blank_lines=True, delim_whitespace=True)
        self.schedule_start=start
        self.schedule_finish=finish
        self.schedule_dur=(self.schedule_finish - self.schedule_start).days + 1

        for index, row in self.df.iterrows():
            if self.df.at[index, 'start'][0] != '=':
                self.df.at[index, 'start'] = (pd.to_datetime(self.df.at[index, 'start']).date() -
                                              self.schedule_start).days
            if self.df.at[index, 'finish'][0] != '=':
                self.df.at[index, 'finish'] = (pd.to_datetime(self.df.at[index, 'finish']).date() -
                                               self.schedule_start).days
        # Resolve relative column values
        for index, row in self.df.iterrows():
            if index == 0:
                continue
            self.df.at[index, 'row'] = int(row['row']) + int(self.df.at[index - 1, 'row'])

    def plot(self):
        """ plot """
        _, self.ax = plt.subplots()
        for _, row in self.df.iterrows():
            # Coarse filter to only render tasks inside schedule start/finish dates
            if (int(row['start']) < 0) or int(row['start']) + row['dur'] > self.schedule_dur:
                continue

            # Render task
            height = 0.4 #default is 0.8
            hbar = plt.barh(y=row['row'], width=row['dur'], left=row['start'],
                    color=row['col'], height=height, alpha=0.4)
            label = row['desc']
            if not pd.isnull(label):
                if row['pos'] == 'e':
                    self.ax.bar_label(hbar, labels=[label], padding=2)
                else:
                    self.ax.text(x=row['start']+0.5, y=row['row']-height*0.7,
                                 s=label, color='black')

            # Render progress
            plt.barh(y=row['row'], width=row['_prog'], left=row['start'], color=row['col'],
                     height=height)

        plt.gca().invert_yaxis()

        # Setup axes
        months = pd.period_range(start=self.schedule_start,
                                 end=self.schedule_finish, freq='m').to_timestamp()
        xticks=[]
        for m in months:
            delta = m.date() - self.schedule_start
            xticks.append(delta.days)
        xticklabels = pd.date_range(start=self.schedule_start,
                                    end=self.schedule_finish+dt.timedelta(days=1),
                                    freq='m').strftime("%b")
        self.ax.set_xlim(0, self.schedule_dur)
        self.ax.set_xticks(xticks)
        self.ax.set_xticklabels(xticklabels)
        self.ax.xaxis.grid(True, alpha=0.5)

        self.ax.set_yticks([])
        self.ax.set_yticklabels([])

        plt.margins(0.2)

    def add_today_line(self, color):
        now = (dt.datetime.now().date() - self.schedule_start).days
        self.ax.axvline(x=now, color=color, linestyle='dashed')

    def set_title(self, title):
        plt.title(title, fontsize=15)

    def set_legend(self, legend_string):
        def parse(s):
            tmp=s.split(':', maxsplit=2)
            return { tmp[0]: tmp[1] }
        patches = []
        legend_lookup = {}
        for i in legend_string.split(','):
            legend_lookup |= parse(i)
        for color, label in legend_lookup.items():
            patches.append(matplotlib.patches.Patch(color=color))
        self.ax.legend(handles=patches, labels=legend_lookup.values(), fontsize=10)

    def get_index_by_id(self, _id):
        """
        Get dataframe index from 'id'.
        The 'id' column exists to enable [a not yet implemented] 'prev'
        column for rendering links
        """
        for index, row in self.df.iterrows():
            if str(row['id']) == str(_id):
                return index
        raise RuntimeError(f"no id '{_id}'")

    def contains_cell_references(self, string):
        """ Return true if formula contains a token with letters """
        tokens = tokenize(BytesIO(string.encode('utf-8')).readline)
        for toknum, _, _, _, _ in tokens:
            if toknum == NAME:
                return True
        return False

    def process_one_formula(self, index, col):
        """
        Resolve cell references (e.g. S10) in formulas if the cell
        pointed at does not contain further cell references.
        We call this function from a loop iterating over all
        dur/start/finish until all cells are resolved+evaluated.
        Handling this recursively would be more efficient, but makes it
        harder to avoid a crash on circular referencing.
        """
        string = self.df.at[index, col]
        tokens = tokenize(BytesIO(string.encode('utf-8')).readline)
        ret=[]
        for toknum, tokval, _, _, _ in tokens:
            if toknum not in (NAME, NUMBER, OP):
                continue
            if toknum != NAME:
                ret += [tokval]
            else:
                if tokval[0] in ('D', 'S', 'F'):
                    uid = tokval[1:]
                    expr = str(self.df.at[self.get_index_by_id(uid), map_field(tokval[0])])
                    if self.contains_cell_references(expr):
                        return False
                    ret += [expr]
        expression = "".join(ret).replace("=", "")
        value = eval(expression)
        self.df.at[index, col] = value
        return True

    def print_dataframe(self):
        print(self.df)

    def process_formulas(self):
        """ Resolve + evaluate formulas in dur/start/finish columns """
        more_work_to_do = True
        while more_work_to_do:
            more_work_to_do = False
            for col in ['dur', 'start', 'finish']:
                for index, row in self.df.iterrows():
                    if isinstance(row[col], int):
                        continue
                    # Formulas must start with equal sign
                    if isinstance(row[col], str) and row[col][0] != '=':
                        continue
                    success = self.process_one_formula(index, col)
                    if not success:
                        more_work_to_do = True
        for col in ['dur', 'start', 'finish']:
            self.df[col] = self.df[col].astype('int')
        self.df['_prog'] = self.df['prog'] * self.df['dur'] / 100

    def datify(self):
        """ Convert start+finish dates to date format from the default offset (in days) """
        for index, row in self.df.iterrows():
            self.df.at[index, 'start'] = (self.schedule_start +
                                          dt.timedelta(days=int(self.df.at[index, 'start'])))
            self.df.at[index, 'finish'] = (self.schedule_start +
                                           dt.timedelta(days=int(self.df.at[index, 'finish'])))

SettingType = Enum('SettingType', 'STRING NUMBER DATE')

@dataclass
class Node:
    key: str
    value: Any
    entity: SettingType

def setting(key: str, value: Any, entity: SettingType):
    return Node(key=key, value=value, entity=entity)

SETTINGS = [
    setting("schedule/start_date", dt.date(2023,9,1), SettingType.DATE),
    setting("schedule/finish_date", dt.date(2024,2,28), SettingType.DATE),
    setting("schedule/legend", "m:magenta,y:yellow", SettingType.STRING),
    setting("schedule/title", "6-month lookahead", SettingType.STRING),
    setting("plot/width", 12, SettingType.NUMBER),
    setting("plot/height", 6, SettingType.NUMBER),
]

def main():
    """ main """
    parser = argparse.ArgumentParser(prog="ganttplay")
    parser.add_argument("--solve-formulas", help="Solve formulas and print values",
                        action='store_true')
    parser.add_argument("--data", help="Path to data file", default='data', metavar="FILE")
    parser.add_argument("--config", help="Path to config.toml file", default='config.toml'
                        ,metavar="FILE")
    args = parser.parse_args()

    with open(args.config, 'rb') as f:
        config = tomllib.load(f)

    defaults = {setting.key: setting for setting in SETTINGS}
    settings = {}
    for key, node in defaults.items():
        section = node.key.split('/')[0]
        variable = node.key.split('/')[1]
        try:
            settings[key] = setting(key, config[section][variable], node.entity)
        except:
            settings[key] = node
        if settings[key].entity == SettingType.DATE and type(settings[key].value) != dt.date:
            raise RuntimeError(f"datetime.date required for {key}; {type(settings[key].value)} provided")

    plt.rcParams['figure.figsize'] = [settings["plot/width"].value, settings["plot/height"].value]

    s = Schedule(args.data, settings["schedule/start_date"].value,
                 settings["schedule/finish_date"].value)
    s.process_formulas()

    if args.solve_formulas:
        s.datify()
        s.print_dataframe()
        sys.exit(0)

    s.plot()
    s.add_today_line('b')
    s.set_title(settings["schedule/title"].value)
    s.set_legend(settings["schedule/legend"].value)

    plt.savefig("Figure_1.png")
    #plt.show()

if __name__ == '__main__':
    main()
